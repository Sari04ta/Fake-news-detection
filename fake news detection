{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4679796,"sourceType":"datasetVersion","datasetId":2712039}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-18T06:00:50.552273Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport itertools\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import PassiveAggressiveClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix","metadata":{"execution":{"iopub.status.busy":"2024-08-26T09:58:22.321819Z","iopub.execute_input":"2024-08-26T09:58:22.322844Z","iopub.status.idle":"2024-08-26T09:58:25.175320Z","shell.execute_reply.started":"2024-08-26T09:58:22.322807Z","shell.execute_reply":"2024-08-26T09:58:25.173919Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"df_true=pd.read_csv('/kaggle/input/fake-news-detection-datasets/News _dataset/True.csv')\ndf_false=pd.read_csv('/kaggle/input/fake-news-detection-datasets/News _dataset/Fake.csv')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_true.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_true.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_true.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_true.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# now , for false news only\n","metadata":{}},{"cell_type":"code","source":"df_false.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_false.shape\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_false.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_false.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" # Inserting a \"class\" as a Target feature(output) :","metadata":{}},{"cell_type":"code","source":"df_false[\"class\"]=0\ndf_true[\"class\"]=1","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_false.shape ,df_true.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Removing the last 10 rows for manual testing:\n\nüßπ Consistency of Data: When testing in Kaggle, it's common practice to remove the last row of data to ensure consistency in assessing model performance and to prevent any biases that could result from the data's last row. The assessment findings might be skewed by outliers or unique examples found in the last row. origin\n\nüìä Visualization Issue: When the last column is excluded from a visualization, it occasionally causes anomalies or visual differences because of the missing data point. This may affect how the data is interpreted when it is displayed. origin\n\n\nüîç Data Cleaning Consideration: deleting redundant or irrelevant information from the dataset can serve to improve its quality. This includes deleting unneeded rows, including the last row. \n","metadata":{}},{"cell_type":"code","source":"df_false_manual_testing = df_false.tail(10)\nfor i in range(23480,23470,-1):\n    df_false.drop([i], axis = 0, inplace = True)\n    \n    \ndf_true_manual_testing = df_true.tail(10)\nfor i in range(21416,21406,-1):\n    df_true.drop([i], axis = 0, inplace = True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_false.shape , df_true.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_false_manual_testing[\"class\"] = 0\ndf_true_manual_testing[\"class\"] = 1","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_false_manual_testing.head","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_true_manual_testing.head","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_manual_testing=pd.concat([df_false_manual_testing,df_true_manual_testing], axis =0)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_manual_testing.to_csv('manual_testing.csv')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" # Merging false and true dataframe :","metadata":{}},{"cell_type":"code","source":"df_merge=pd.concat([df_false,df_true],axis=0)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_merge.head(10)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_merge.columns","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" # Removing column which are not required:","metadata":{}},{"cell_type":"code","source":"df=df_merge.drop(['title', 'subject','date'],axis=1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" # Randon shuffling the dataframe**","metadata":{}},{"cell_type":"code","source":"df=df.sample(frac = 1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head(10)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.reset_index(inplace = True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.drop([\"index\"],axis=1,inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" # Create a function to read the text:","metadata":{}},{"cell_type":"code","source":"def wordopt(text):\n    import re\n    import string\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub(\"\\\\W\",\" \",text) \n    text = re.sub('https?://\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)    \n    return text","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndf[\"text\"] = df[\"text\"].apply(wordopt)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" # > **defining dependent and independent variable**","metadata":{}},{"cell_type":"code","source":"X=df[\"text\"]\ny=df[\"class\"]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" # trainig and testing*","metadata":{}},{"cell_type":"code","source":"X_train,y_train,X_test,y_test=train_test_split(X,y,test_size=0.25)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# convert text to vector:","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorization = TfidfVectorizer(encoding='ignore',stop_words='english',max_df=0.5)\nXv_train = vectorization.fit_transform(X_train)\nXv_test = vectorization.transform(X_test)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Logistic regreesion:","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nLR = LogisticRegression()\nLR.fit(Xv_train,y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_lr=LR.predict(Xv_test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"LR.score(Xv_test, y_test)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(classification_report(y_test, pred_lr))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# PAC:","metadata":{}},{"cell_type":"code","source":"#DataFlair - Initialize a PassiveAggressiveClassifier\npac=PassiveAggressiveClassifier(max_iter=50)\npac.fit(Xv_train,y_train)\n#DataFlair - Predict on the test set and calculate accuracy\ny_pred=pac.predict(Xv_test)\nscore=accuracy_score(y_test,y_pred)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#DataFlair - Build confusion matrix\nconfusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])","metadata":{},"execution_count":null,"outputs":[]}]}